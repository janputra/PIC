

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Sep 23 17:14:58 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1938
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.05
    17                           ; Generated 20/12/2018 GMT
    18                           ; 
    19                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F1938 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  008C                     	;# 
    81  008D                     	;# 
    82  008E                     	;# 
    83  0090                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0095                     	;# 
    88  0096                     	;# 
    89  0097                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009A                     	;# 
    93  009B                     	;# 
    94  009B                     	;# 
    95  009C                     	;# 
    96  009D                     	;# 
    97  009E                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  0110                     	;# 
   102  0111                     	;# 
   103  0112                     	;# 
   104  0113                     	;# 
   105  0114                     	;# 
   106  0115                     	;# 
   107  0116                     	;# 
   108  0117                     	;# 
   109  0118                     	;# 
   110  0119                     	;# 
   111  011A                     	;# 
   112  011B                     	;# 
   113  011D                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  0191                     	;# 
   117  0191                     	;# 
   118  0192                     	;# 
   119  0193                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  0199                     	;# 
   126  019A                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019C                     	;# 
   132  019C                     	;# 
   133  019D                     	;# 
   134  019E                     	;# 
   135  019F                     	;# 
   136  020D                     	;# 
   137  0210                     	;# 
   138  0211                     	;# 
   139  0212                     	;# 
   140  0213                     	;# 
   141  0214                     	;# 
   142  0215                     	;# 
   143  0215                     	;# 
   144  0216                     	;# 
   145  0217                     	;# 
   146  0291                     	;# 
   147  0291                     	;# 
   148  0292                     	;# 
   149  0293                     	;# 
   150  0294                     	;# 
   151  0295                     	;# 
   152  0295                     	;# 
   153  0296                     	;# 
   154  0298                     	;# 
   155  0298                     	;# 
   156  0299                     	;# 
   157  029A                     	;# 
   158  029B                     	;# 
   159  029C                     	;# 
   160  029C                     	;# 
   161  029D                     	;# 
   162  029E                     	;# 
   163  029F                     	;# 
   164  0311                     	;# 
   165  0311                     	;# 
   166  0312                     	;# 
   167  0313                     	;# 
   168  0314                     	;# 
   169  0315                     	;# 
   170  0315                     	;# 
   171  0316                     	;# 
   172  0318                     	;# 
   173  0318                     	;# 
   174  0319                     	;# 
   175  031A                     	;# 
   176  031C                     	;# 
   177  031C                     	;# 
   178  031D                     	;# 
   179  031E                     	;# 
   180  0394                     	;# 
   181  0395                     	;# 
   182  0396                     	;# 
   183  0415                     	;# 
   184  0416                     	;# 
   185  0417                     	;# 
   186  041C                     	;# 
   187  041D                     	;# 
   188  041E                     	;# 
   189  0791                     	;# 
   190  0792                     	;# 
   191  0793                     	;# 
   192  0794                     	;# 
   193  0795                     	;# 
   194  0798                     	;# 
   195  0799                     	;# 
   196  07A0                     	;# 
   197  07A1                     	;# 
   198  07A3                     	;# 
   199  07A4                     	;# 
   200  07A6                     	;# 
   201  07A7                     	;# 
   202  07A9                     	;# 
   203  07AA                     	;# 
   204  0FE4                     	;# 
   205  0FE5                     	;# 
   206  0FE6                     	;# 
   207  0FE7                     	;# 
   208  0FE8                     	;# 
   209  0FE9                     	;# 
   210  0FEA                     	;# 
   211  0FEB                     	;# 
   212  0FED                     	;# 
   213  0FEE                     	;# 
   214  0FEF                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0008                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  008C                     	;# 
   246  008D                     	;# 
   247  008E                     	;# 
   248  0090                     	;# 
   249  0091                     	;# 
   250  0092                     	;# 
   251  0093                     	;# 
   252  0095                     	;# 
   253  0096                     	;# 
   254  0097                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009A                     	;# 
   258  009B                     	;# 
   259  009B                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  010E                     	;# 
   266  0110                     	;# 
   267  0111                     	;# 
   268  0112                     	;# 
   269  0113                     	;# 
   270  0114                     	;# 
   271  0115                     	;# 
   272  0116                     	;# 
   273  0117                     	;# 
   274  0118                     	;# 
   275  0119                     	;# 
   276  011A                     	;# 
   277  011B                     	;# 
   278  011D                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281  0191                     	;# 
   282  0191                     	;# 
   283  0192                     	;# 
   284  0193                     	;# 
   285  0193                     	;# 
   286  0193                     	;# 
   287  0194                     	;# 
   288  0195                     	;# 
   289  0196                     	;# 
   290  0199                     	;# 
   291  019A                     	;# 
   292  019B                     	;# 
   293  019B                     	;# 
   294  019B                     	;# 
   295  019B                     	;# 
   296  019C                     	;# 
   297  019C                     	;# 
   298  019D                     	;# 
   299  019E                     	;# 
   300  019F                     	;# 
   301  020D                     	;# 
   302  0210                     	;# 
   303  0211                     	;# 
   304  0212                     	;# 
   305  0213                     	;# 
   306  0214                     	;# 
   307  0215                     	;# 
   308  0215                     	;# 
   309  0216                     	;# 
   310  0217                     	;# 
   311  0291                     	;# 
   312  0291                     	;# 
   313  0292                     	;# 
   314  0293                     	;# 
   315  0294                     	;# 
   316  0295                     	;# 
   317  0295                     	;# 
   318  0296                     	;# 
   319  0298                     	;# 
   320  0298                     	;# 
   321  0299                     	;# 
   322  029A                     	;# 
   323  029B                     	;# 
   324  029C                     	;# 
   325  029C                     	;# 
   326  029D                     	;# 
   327  029E                     	;# 
   328  029F                     	;# 
   329  0311                     	;# 
   330  0311                     	;# 
   331  0312                     	;# 
   332  0313                     	;# 
   333  0314                     	;# 
   334  0315                     	;# 
   335  0315                     	;# 
   336  0316                     	;# 
   337  0318                     	;# 
   338  0318                     	;# 
   339  0319                     	;# 
   340  031A                     	;# 
   341  031C                     	;# 
   342  031C                     	;# 
   343  031D                     	;# 
   344  031E                     	;# 
   345  0394                     	;# 
   346  0395                     	;# 
   347  0396                     	;# 
   348  0415                     	;# 
   349  0416                     	;# 
   350  0417                     	;# 
   351  041C                     	;# 
   352  041D                     	;# 
   353  041E                     	;# 
   354  0791                     	;# 
   355  0792                     	;# 
   356  0793                     	;# 
   357  0794                     	;# 
   358  0795                     	;# 
   359  0798                     	;# 
   360  0799                     	;# 
   361  07A0                     	;# 
   362  07A1                     	;# 
   363  07A3                     	;# 
   364  07A4                     	;# 
   365  07A6                     	;# 
   366  07A7                     	;# 
   367  07A9                     	;# 
   368  07AA                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380                           
   381                           	psect	nvBANK0
   382  0035                     __pnvBANK0:	
   383  0035                     _freq:	
   384  0035                     	ds	4
   385  0039                     _PHASE:	
   386  0039                     	ds	2
   387  003B                     _SET_1:	
   388  003B                     	ds	2
   389  003D                     _SET_0:	
   390  003D                     	ds	2
   391  003F                     _RESET:	
   392  003F                     	ds	2
   393  005C                     _INTE	set	92
   394  0059                     _INTF	set	89
   395  005E                     _PEIE	set	94
   396  005F                     _GIE	set	95
   397  0076                     _RC6	set	118
   398  0075                     _RC5	set	117
   399  0074                     _RC4	set	116
   400  04AE                     _INTEDG	set	1198
   401  0474                     _TRISC4	set	1140
   402  0475                     _TRISC5	set	1141
   403  0476                     _TRISC6	set	1142
   404                           
   405                           ; #config settings
   406  0000                     
   407                           	psect	cinit
   408  07F5                     start_initialization:	
   409  07F5                     __initialization:	
   410                           
   411                           ; Clear objects allocated to COMMON
   412  07F5  01FD               	clrf	__pbssCOMMON& (0+127)
   413                           
   414                           ; Clear objects allocated to BANK0
   415  07F6  3020               	movlw	low __pbssBANK0
   416  07F7  0084               	movwf	4
   417  07F8  3000               	movlw	high __pbssBANK0
   418  07F9  0085               	movwf	5
   419  07FA  3015               	movlw	21
   420  07FB  3186  26FB         	fcall	clear_ram0
   421  07FD                     end_of_initialization:	
   422                           ;End of C runtime variable initialization code
   423                           
   424  07FD                     __end_of__initialization:	
   425  07FD  0020               	movlb	0
   426  07FE  3187  2F80         	ljmp	_main	;jump to C main() function
   427                           
   428                           	psect	bssCOMMON
   429  007D                     __pbssCOMMON:	
   430  007D                     _F_FREQ:	
   431  007D                     	ds	1
   432                           
   433                           	psect	bssBANK0
   434  0020                     __pbssBANK0:	
   435  0020                     _buff:	
   436  0020                     	ds	8
   437  0028                     _last_freq:	
   438  0028                     	ds	4
   439  002C                     _temp:	
   440  002C                     	ds	4
   441  0030                     _freqLSB:	
   442  0030                     	ds	2
   443  0032                     _freqMSB:	
   444  0032                     	ds	2
   445  0034                     _cursor_dir:	
   446  0034                     	ds	1
   447                           
   448                           	psect	clrtext
   449  06FB                     clear_ram0:	
   450                           ;	Called with FSR0 containing the base address, and
   451                           ;	WREG with the size to clear
   452                           
   453  06FB  0064               	clrwdt	;clear the watchdog before getting into this loop
   454  06FC                     clrloop0:	
   455  06FC  0180               	clrf	0	;clear RAM location pointed to by FSR
   456  06FD  3101               	addfsr 0,1
   457  06FE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   458  06FF  2EFC               	goto	clrloop0	;have we reached the end yet?
   459  0700  3400               	retlw	0	;all done for this memory range, return
   460                           
   461                           	psect	cstackCOMMON
   462  0070                     __pcstackCOMMON:	
   463  0070                     ?_spi_write:	
   464  0070                     ?_DDS_init:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_main:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     spi_write@data:	
   471                           ; 1 bytes @ 0x0
   472                           
   473                           
   474                           ; 2 bytes @ 0x0
   475  0070                     	ds	2
   476  0072                     ??_spi_write:	
   477                           
   478                           ; 1 bytes @ 0x2
   479  0072                     	ds	1
   480  0073                     spi_write@i:	
   481                           
   482                           ; 1 bytes @ 0x3
   483  0073                     	ds	1
   484  0074                     ?_DDS:	
   485  0074                     DDS@input:	
   486                           ; 1 bytes @ 0x4
   487                           
   488                           
   489                           ; 4 bytes @ 0x4
   490  0074                     	ds	4
   491  0078                     DDS@reg:	
   492                           
   493                           ; 1 bytes @ 0x8
   494  0078                     	ds	1
   495  0079                     ??_DDS:	
   496                           
   497                           ; 1 bytes @ 0x9
   498  0079                     	ds	4
   499  007D                     ??_DDS_init:	
   500  007D                     ??_main:	
   501                           ; 1 bytes @ 0xD
   502                           
   503                           
   504                           	psect	maintext
   505  0780                     __pmaintext:	
   506                           ; 1 bytes @ 0xD
   507 ;;
   508 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   509 ;;
   510 ;; *************** function _main *****************
   511 ;; Defined at:
   512 ;;		line 119 in file "newmain.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;		None
   515 ;; Auto vars:     Size  Location     Type
   516 ;;		None
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, status,2, status,0, pclath, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : B1F/0
   523 ;;		On exit  : 0/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   530 ;;Total ram usage:        0 bytes
   531 ;; Hardware stack levels required when called:    3
   532 ;; This function calls:
   533 ;;		_DDS
   534 ;;		_DDS_init
   535 ;;		_spi_write
   536 ;; This function is called by:
   537 ;;		Startup code after reset
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541                           
   542                           ;psect for function _main
   543  0780                     _main:	
   544                           
   545                           ;newmain.c: 123:     RESET=0x2100;
   546                           
   547                           ;incstack = 0
   548                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   549  0780  3000               	movlw	0
   550  0781  0020               	movlb	0	; select bank0
   551  0782  00BF               	movwf	_RESET
   552  0783  3021               	movlw	33
   553  0784  00C0               	movwf	_RESET+1
   554                           
   555                           ;newmain.c: 124:     SET_0=0x2000;
   556  0785  3000               	movlw	0
   557  0786  00BD               	movwf	_SET_0
   558  0787  3020               	movlw	32
   559  0788  00BE               	movwf	_SET_0+1
   560                           
   561                           ;newmain.c: 125:     SET_1=0x2800;
   562  0789  3000               	movlw	0
   563  078A  00BB               	movwf	_SET_1
   564  078B  3028               	movlw	40
   565  078C  00BC               	movwf	_SET_1+1
   566                           
   567                           ;newmain.c: 126:     PHASE=0xC000;
   568  078D  3000               	movlw	0
   569  078E  00B9               	movwf	_PHASE
   570  078F  30C0               	movlw	192
   571  0790  00BA               	movwf	_PHASE+1
   572                           
   573                           ;newmain.c: 127:     TRISC6 = 0;
   574  0791  0021               	movlb	1	; select bank1
   575  0792  130E               	bcf	14,6	;volatile
   576                           
   577                           ;newmain.c: 128:     TRISC5 = 0;
   578  0793  128E               	bcf	14,5	;volatile
   579                           
   580                           ;newmain.c: 129:     TRISC4 = 0;
   581  0794  120E               	bcf	14,4	;volatile
   582                           
   583                           ;newmain.c: 130:     F_FREQ=0;
   584  0795  01FD               	clrf	_F_FREQ
   585                           
   586                           ;newmain.c: 131:     RC4 = 1;
   587  0796  0020               	movlb	0	; select bank0
   588  0797  160E               	bsf	14,4	;volatile
   589                           
   590                           ;newmain.c: 132:     RC6 = 1;
   591  0798  170E               	bsf	14,6	;volatile
   592                           
   593                           ;newmain.c: 137:     freq=214748;
   594  0799  3000               	movlw	0
   595  079A  00B8               	movwf	_freq+3
   596  079B  3003               	movlw	3
   597  079C  00B7               	movwf	_freq+2
   598  079D  3046               	movlw	70
   599  079E  00B6               	movwf	_freq+1
   600  079F  30DC               	movlw	220
   601  07A0  00B5               	movwf	_freq
   602                           
   603                           ;newmain.c: 139:     INTEDG =0;
   604  07A1  0021               	movlb	1	; select bank1
   605  07A2  1315               	bcf	21,6	;volatile
   606                           
   607                           ;newmain.c: 140:     GIE =1;
   608  07A3  178B               	bsf	11,7	;volatile
   609                           
   610                           ;newmain.c: 141:     PEIE =1;
   611  07A4  170B               	bsf	11,6	;volatile
   612                           
   613                           ;newmain.c: 142:     INTF =0;
   614  07A5  108B               	bcf	11,1	;volatile
   615                           
   616                           ;newmain.c: 143:     INTE =1;
   617  07A6  160B               	bsf	11,4	;volatile
   618                           
   619                           ;newmain.c: 145:     DDS_init();
   620  07A7  3187  2724  3187   	fcall	_DDS_init
   621  07AA                     l817:	
   622                           
   623                           ;newmain.c: 147:       {;newmain.c: 151:             if (freq!=last_freq)
   624  07AA  0020               	movlb	0	; select bank0
   625  07AB  082B               	movf	_last_freq+3,w
   626  07AC  0638               	xorwf	_freq+3,w
   627  07AD  1D03               	skipz
   628  07AE  2FB9               	goto	u135
   629  07AF  082A               	movf	_last_freq+2,w
   630  07B0  0637               	xorwf	_freq+2,w
   631  07B1  1D03               	skipz
   632  07B2  2FB9               	goto	u135
   633  07B3  0829               	movf	_last_freq+1,w
   634  07B4  0636               	xorwf	_freq+1,w
   635  07B5  1D03               	skipz
   636  07B6  2FB9               	goto	u135
   637  07B7  0828               	movf	_last_freq,w
   638  07B8  0635               	xorwf	_freq,w
   639  07B9                     u135:	
   640  07B9  1903               	skipnz
   641  07BA  2FAA               	goto	l817
   642                           
   643                           ;newmain.c: 152:           {;newmain.c: 153:               if (F_FREQ==1)
   644  07BB  037D               	decf	_F_FREQ,w
   645  07BC  1D03               	btfss	3,2
   646  07BD  2FD4               	goto	l825
   647                           
   648                           ;newmain.c: 154:               {;newmain.c: 155:               DDS(freq,0);
   649  07BE  0838               	movf	_freq+3,w
   650  07BF  00F7               	movwf	DDS@input+3
   651  07C0  0837               	movf	_freq+2,w
   652  07C1  00F6               	movwf	DDS@input+2
   653  07C2  0836               	movf	_freq+1,w
   654  07C3  00F5               	movwf	DDS@input+1
   655  07C4  0835               	movf	_freq,w
   656  07C5  00F4               	movwf	DDS@input
   657  07C6  01F8               	clrf	DDS@reg
   658  07C7  3187  2748  3187   	fcall	_DDS
   659                           
   660                           ;newmain.c: 156:               spi_write(SET_0);
   661  07CA  0020               	movlb	0	; select bank0
   662  07CB  083E               	movf	_SET_0+1,w
   663  07CC  00F1               	movwf	spi_write@data+1
   664  07CD  083D               	movf	_SET_0,w
   665  07CE  00F0               	movwf	spi_write@data
   666  07CF  3187  2701  3187   	fcall	_spi_write
   667                           
   668                           ;newmain.c: 157:               F_FREQ=0;
   669  07D2  01FD               	clrf	_F_FREQ
   670                           
   671                           ;newmain.c: 158:               }
   672  07D3  2FEB               	goto	l829
   673  07D4                     l825:	
   674                           
   675                           ;newmain.c: 160:               {;newmain.c: 161:               DDS(freq,1);
   676  07D4  0838               	movf	_freq+3,w
   677  07D5  00F7               	movwf	DDS@input+3
   678  07D6  0837               	movf	_freq+2,w
   679  07D7  00F6               	movwf	DDS@input+2
   680  07D8  0836               	movf	_freq+1,w
   681  07D9  00F5               	movwf	DDS@input+1
   682  07DA  0835               	movf	_freq,w
   683  07DB  00F4               	movwf	DDS@input
   684  07DC  01F8               	clrf	DDS@reg
   685  07DD  0AF8               	incf	DDS@reg,f
   686  07DE  3187  2748  3187   	fcall	_DDS
   687                           
   688                           ;newmain.c: 162:               spi_write(SET_1);
   689  07E1  0020               	movlb	0	; select bank0
   690  07E2  083C               	movf	_SET_1+1,w
   691  07E3  00F1               	movwf	spi_write@data+1
   692  07E4  083B               	movf	_SET_1,w
   693  07E5  00F0               	movwf	spi_write@data
   694  07E6  3187  2701  3187   	fcall	_spi_write
   695                           
   696                           ;newmain.c: 163:               F_FREQ=1;
   697  07E9  01FD               	clrf	_F_FREQ
   698  07EA  0AFD               	incf	_F_FREQ,f
   699  07EB                     l829:	
   700                           
   701                           ;newmain.c: 165:               last_freq=freq;
   702  07EB  0020               	movlb	0	; select bank0
   703  07EC  0838               	movf	_freq+3,w
   704  07ED  00AB               	movwf	_last_freq+3
   705  07EE  0837               	movf	_freq+2,w
   706  07EF  00AA               	movwf	_last_freq+2
   707  07F0  0836               	movf	_freq+1,w
   708  07F1  00A9               	movwf	_last_freq+1
   709  07F2  0835               	movf	_freq,w
   710  07F3  00A8               	movwf	_last_freq
   711  07F4  2FAA               	goto	l817
   712  07F5                     __end_of_main:	
   713                           
   714                           	psect	text1
   715  0724                     __ptext1:	
   716 ;; *************** function _DDS_init *****************
   717 ;; Defined at:
   718 ;;		line 109 in file "newmain.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;		None
   721 ;; Auto vars:     Size  Location     Type
   722 ;;		None
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, status,2, status,0, pclath, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   736 ;;Total ram usage:        0 bytes
   737 ;; Hardware stack levels used:    1
   738 ;; Hardware stack levels required when called:    2
   739 ;; This function calls:
   740 ;;		_DDS
   741 ;;		_spi_write
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           
   748                           ;psect for function _DDS_init
   749  0724                     _DDS_init:	
   750                           
   751                           ;newmain.c: 111:     spi_write(RESET);
   752                           
   753                           ;incstack = 0
   754                           ; Regs used in _DDS_init: [wreg+status,2+status,0+pclath+cstack]
   755  0724  0020               	movlb	0	; select bank0
   756  0725  0840               	movf	_RESET+1,w
   757  0726  00F1               	movwf	spi_write@data+1
   758  0727  083F               	movf	_RESET,w
   759  0728  00F0               	movwf	spi_write@data
   760  0729  3187  2701  3187   	fcall	_spi_write
   761                           
   762                           ;newmain.c: 112:     DDS(335572,0);
   763  072C  3000               	movlw	0
   764  072D  00F7               	movwf	DDS@input+3
   765  072E  3005               	movlw	5
   766  072F  00F6               	movwf	DDS@input+2
   767  0730  301E               	movlw	30
   768  0731  00F5               	movwf	DDS@input+1
   769  0732  30D4               	movlw	212
   770  0733  00F4               	movwf	DDS@input
   771  0734  01F8               	clrf	DDS@reg
   772  0735  3187  2748  3187   	fcall	_DDS
   773                           
   774                           ;newmain.c: 113:     spi_write(PHASE);
   775  0738  0020               	movlb	0	; select bank0
   776  0739  083A               	movf	_PHASE+1,w
   777  073A  00F1               	movwf	spi_write@data+1
   778  073B  0839               	movf	_PHASE,w
   779  073C  00F0               	movwf	spi_write@data
   780  073D  3187  2701  3187   	fcall	_spi_write
   781                           
   782                           ;newmain.c: 114:     spi_write(SET_0);
   783  0740  0020               	movlb	0	; select bank0
   784  0741  083E               	movf	_SET_0+1,w
   785  0742  00F1               	movwf	spi_write@data+1
   786  0743  083D               	movf	_SET_0,w
   787  0744  00F0               	movwf	spi_write@data
   788  0745  3187  2701         	fcall	_spi_write
   789  0747  0008               	return
   790  0748                     __end_of_DDS_init:	
   791                           
   792                           	psect	text2
   793  0748                     __ptext2:	
   794 ;; *************** function _DDS *****************
   795 ;; Defined at:
   796 ;;		line 88 in file "newmain.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  input           4    4[COMMON] unsigned long 
   799 ;;  reg             1    8[COMMON] unsigned char 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;		None
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, status,2, status,0, pclath, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   811 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   813 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   814 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   815 ;;Total ram usage:        9 bytes
   816 ;; Hardware stack levels used:    1
   817 ;; Hardware stack levels required when called:    1
   818 ;; This function calls:
   819 ;;		_spi_write
   820 ;; This function is called by:
   821 ;;		_DDS_init
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           
   827                           ;psect for function _DDS
   828  0748                     _DDS:	
   829                           
   830                           ;newmain.c: 88: void DDS(uint32_t input,char reg);newmain.c: 89: {;newmain.c: 90:     fr
      +                          eqLSB = input &~0xC000;
   831                           
   832                           ;incstack = 0
   833                           ; Regs used in _DDS: [wreg+status,2+status,0+pclath+cstack]
   834  0748  30FF               	movlw	255
   835  0749  0574               	andwf	DDS@input,w
   836  074A  0020               	movlb	0	; select bank0
   837  074B  00B0               	movwf	_freqLSB
   838  074C  303F               	movlw	63
   839  074D  0575               	andwf	DDS@input+1,w
   840  074E  00B1               	movwf	_freqLSB+1
   841                           
   842                           ;newmain.c: 92:     freqMSB = input>>14;
   843  074F  0874               	movf	DDS@input,w
   844  0750  00F9               	movwf	??_DDS
   845  0751  0875               	movf	DDS@input+1,w
   846  0752  00FA               	movwf	??_DDS+1
   847  0753  0876               	movf	DDS@input+2,w
   848  0754  00FB               	movwf	??_DDS+2
   849  0755  0877               	movf	DDS@input+3,w
   850  0756  00FC               	movwf	??_DDS+3
   851  0757  300E               	movlw	14
   852  0758                     u105:	
   853  0758  36FC               	lsrf	??_DDS+3,f
   854  0759  0CFB               	rrf	??_DDS+2,f
   855  075A  0CFA               	rrf	??_DDS+1,f
   856  075B  0CF9               	rrf	??_DDS,f
   857  075C  0B89               	decfsz	9,f
   858  075D  2F58               	goto	u105
   859  075E  087A               	movf	??_DDS+1,w
   860  075F  00B3               	movwf	_freqMSB+1
   861  0760  0879               	movf	??_DDS,w
   862  0761  00B2               	movwf	_freqMSB
   863                           
   864                           ;newmain.c: 93:     freqMSB &=~0xC000;
   865  0762  30FF               	movlw	255
   866  0763  05B2               	andwf	_freqMSB,f
   867  0764  303F               	movlw	63
   868  0765  05B3               	andwf	_freqMSB+1,f
   869                           
   870                           ;newmain.c: 95:     if (reg==0){
   871  0766  0878               	movf	DDS@reg,w
   872  0767  1D03               	btfss	3,2
   873  0768  2F6C               	goto	l781
   874                           
   875                           ;newmain.c: 96:     freqLSB |=0x4000;
   876  0769  1731               	bsf	_freqLSB+1,6
   877                           
   878                           ;newmain.c: 97:     freqMSB |=0x4000;
   879  076A  1733               	bsf	_freqMSB+1,6
   880                           
   881                           ;newmain.c: 98:     }
   882  076B  2F71               	goto	l785
   883  076C                     l781:	
   884  076C  0378               	decf	DDS@reg,w
   885  076D  1D03               	btfss	3,2
   886  076E  2F71               	goto	l785
   887                           
   888                           ;newmain.c: 100:     {;newmain.c: 101:     freqLSB |=0x8000;
   889  076F  17B1               	bsf	_freqLSB+1,7
   890                           
   891                           ;newmain.c: 102:     freqMSB |=0x8000;
   892  0770  17B3               	bsf	_freqMSB+1,7
   893  0771                     l785:	
   894                           
   895                           ;newmain.c: 105:     spi_write(freqLSB);
   896  0771  0831               	movf	_freqLSB+1,w
   897  0772  00F1               	movwf	spi_write@data+1
   898  0773  0830               	movf	_freqLSB,w
   899  0774  00F0               	movwf	spi_write@data
   900  0775  3187  2701  3187   	fcall	_spi_write
   901                           
   902                           ;newmain.c: 106:     spi_write(freqMSB);
   903  0778  0020               	movlb	0	; select bank0
   904  0779  0833               	movf	_freqMSB+1,w
   905  077A  00F1               	movwf	spi_write@data+1
   906  077B  0832               	movf	_freqMSB,w
   907  077C  00F0               	movwf	spi_write@data
   908  077D  3187  2701         	fcall	_spi_write
   909  077F  0008               	return
   910  0780                     __end_of_DDS:	
   911                           
   912                           	psect	text3
   913  0701                     __ptext3:	
   914 ;; *************** function _spi_write *****************
   915 ;; Defined at:
   916 ;;		line 65 in file "newmain.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  data            2    0[COMMON] unsigned int 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  i               1    3[COMMON] unsigned char 
   921 ;; Return value:  Size  Location     Type
   922 ;;                  1    wreg      void 
   923 ;; Registers used:
   924 ;;		wreg, status,2, status,0
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   930 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   932 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   933 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   934 ;;Total ram usage:        4 bytes
   935 ;; Hardware stack levels used:    1
   936 ;; This function calls:
   937 ;;		Nothing
   938 ;; This function is called by:
   939 ;;		_DDS
   940 ;;		_DDS_init
   941 ;;		_main
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           
   946                           ;psect for function _spi_write
   947  0701                     _spi_write:	
   948                           
   949                           ;newmain.c: 65: void spi_write(unsigned int data);newmain.c: 66: { RC4=0;
   950                           
   951                           ;incstack = 0
   952                           ; Regs used in _spi_write: [wreg+status,2+status,0]
   953  0701  0020               	movlb	0	; select bank0
   954  0702  120E               	bcf	14,4	;volatile
   955                           
   956                           ;newmain.c: 67: _delay((unsigned long)((1)*(8000000/4000000.0)));
   957  0703  3200               	nop2	;2 cycle nop
   958                           
   959                           ;newmain.c: 68:     for(char i=0; i<16; i++)
   960  0704  01F3               	clrf	spi_write@i
   961  0705                     l51:	
   962                           
   963                           ;newmain.c: 69:  {;newmain.c: 70:         if (data&0x8000) RC5=1;
   964  0705  1FF1               	btfss	spi_write@data+1,7
   965  0706  2F0A               	goto	l53
   966  0707  0020               	movlb	0	; select bank0
   967  0708  168E               	bsf	14,5	;volatile
   968  0709  2F0C               	goto	l54
   969  070A                     l53:	
   970                           ;newmain.c: 71:         else RC5=0;
   971                           
   972  070A  0020               	movlb	0	; select bank0
   973  070B  128E               	bcf	14,5	;volatile
   974  070C                     l54:	
   975                           
   976                           ;newmain.c: 72:         _delay((unsigned long)((1)*(8000000/4000000.0)));
   977  070C  3200               	nop2	;2 cycle nop
   978                           
   979                           ;newmain.c: 73:        RC6=0;
   980  070D  0020               	movlb	0	; select bank0
   981  070E  130E               	bcf	14,6	;volatile
   982                           
   983                           ;newmain.c: 74:        _delay((unsigned long)((1)*(8000000/4000000.0)));
   984  070F  3200               	nop2	;2 cycle nop
   985                           
   986                           ;newmain.c: 75:        RC6=1;
   987  0710  0020               	movlb	0	; select bank0
   988  0711  170E               	bsf	14,6	;volatile
   989                           
   990                           ;newmain.c: 76:        data=data<<1;
   991  0712  3570               	lslf	spi_write@data,w
   992  0713  00F0               	movwf	spi_write@data
   993  0714  0D71               	rlf	spi_write@data+1,w
   994  0715  00F1               	movwf	spi_write@data+1
   995                           
   996                           ;newmain.c: 77:  }
   997  0716  3001               	movlw	1
   998  0717  00F2               	movwf	??_spi_write
   999  0718  0872               	movf	??_spi_write,w
  1000  0719  07F3               	addwf	spi_write@i,f
  1001  071A  3010               	movlw	16
  1002  071B  0273               	subwf	spi_write@i,w
  1003  071C  1C03               	skipc
  1004  071D  2F05               	goto	l51
  1005                           
  1006                           ;newmain.c: 78:     RC5=0;
  1007  071E  128E               	bcf	14,5	;volatile
  1008                           
  1009                           ;newmain.c: 79:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  1010  071F  3200               	nop2	;2 cycle nop
  1011                           
  1012                           ;newmain.c: 80:      RC4=1;
  1013  0720  0020               	movlb	0	; select bank0
  1014  0721  160E               	bsf	14,4	;volatile
  1015                           
  1016                           ;newmain.c: 81:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  1017  0722  3200               	nop2	;2 cycle nop
  1018  0723  0008               	return
  1019  0724                     __end_of_spi_write:	
  1020  007E                     btemp	set	126	;btemp
  1021  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         22
    Persistent  44
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      0      33
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_DDS
    _DDS_init->_DDS
    _DDS->_spi_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3580
                                _DDS
                           _DDS_init
                          _spi_write
 ---------------------------------------------------------------------------------
 (1) _DDS_init                                             0     0      0    1790
                                _DDS
                          _spi_write
 ---------------------------------------------------------------------------------
 (2) _DDS                                                  9     4      5    1167
                                              4 COMMON     9     4      5
                          _spi_write
 ---------------------------------------------------------------------------------
 (1) _spi_write                                            4     2      2     623
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DDS
     _spi_write
   _DDS_init
     _DDS
       _spi_write
     _spi_write
   _spi_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0      21       5       41.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      2F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      2F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Sep 23 17:14:58 2019

            __CFG_CP$OFF 0000                       l51 0705                       l53 070A  
                     l54 070C                      l825 07D4                      l817 07AA  
                    l781 076C                      l829 07EB                      l785 0771  
                    _DDS 0748                      _GIE 005F                      _RC4 0074  
                    _RC5 0075                      _RC6 0076                      u105 0758  
                    u135 07B9             __CFG_CPD$OFF 0000             __CFG_BORV$HI 0000  
                    wreg 0009             __CFG_LVP$OFF 0000                     ?_DDS 0074  
                   _PEIE 005E                     _INTE 005C                     _INTF 0059  
           __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000                     _buff 0020  
                   _main 0780                     _freq 0035                     _temp 002C  
                   fsr0h 0005                     indf0 0000                     fsr0l 0004  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 0002  
          __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000                    ??_DDS 0079  
       __end_of_DDS_init 0748                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  _PHASE 0039                    _RESET 003F                    _SET_0 003D  
                  _SET_1 003B                    status 0003                    wtemp0 007E  
        __initialization 07F5             __end_of_main 07F5                   DDS@reg 0078  
                 ??_main 007D           __CFG_PLLEN$OFF 0000                   _INTEDG 04AE  
                 _F_FREQ 007D                   _TRISC4 0474                   _TRISC5 0475  
                 _TRISC6 0476           __CFG_PWRTE$OFF 0000                ?_DDS_init 0070  
__end_of__initialization 07FD            spi_write@data 0070           __pcstackCOMMON 0070  
             __pbssBANK0 0020               ??_DDS_init 007D          __CFG_VCAPEN$OFF 0000  
             __pmaintext 0780       __size_of_spi_write 0023          __CFG_STVREN$OFF 0000  
                __ptext1 0724                  __ptext2 0748                  __ptext3 0701  
             _cursor_dir 0034                  _freqLSB 0030                  _freqMSB 0032  
           __size_of_DDS 0038                  clrloop0 06FC     end_of_initialization 07FD  
      __end_of_spi_write 0724         __CFG_FOSC$INTOSC 0000        __size_of_DDS_init 0024  
    start_initialization 07F5              __end_of_DDS 0780                 DDS@input 0074  
            __pbssCOMMON 007D                ___latbits 0003                __pnvBANK0 0035  
              _last_freq 0028                 _DDS_init 0724                clear_ram0 06FB  
              _spi_write 0701               spi_write@i 0073               ?_spi_write 0070  
          __size_of_main 0075        __CFG_CLKOUTEN$OFF 0000              ??_spi_write 0072  
